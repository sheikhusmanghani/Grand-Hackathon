const express = require("express");
const router = express.Router();
const userSchema = require("../model/user");
const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");

// routes
router.get("/login", async (req, res) => {
  res.json({ message: "login running" });
});

router.get("/signup", async (req, res) => {
  res.json({ message: "signup running" });
});

router.post("/signup", async (req, res) => {
  try {
    const { cnic, name, email } = req.body;

    if (!cnic || !name || !email) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    // password generate
    const autoGeneratedPassword = Math.random().toString(36).slice(-8);

    // saving data in db
    async function createUser() {
      const newUser = new userSchema({
        cnic,
        name,
        email,
        password: autoGeneratedPassword,
      });

      const savedUser = await newUser.save();
      console.log("User created successfully:", savedUser);
    }
    createUser();

    // send email
    const themail = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: "usmanghani22322@gmail.com",
        pass: " zyle owzn dzgw qynq",
      },
    });

    const mailOptions = {
      from: "usmanghani22322@gmail.com",
      to: email,
      subject: "Your Account Password Is Here",
      text: `Hello ${name},\n\nYour account has been created successfully!\nYour password is: ${autoGeneratedPassword}\n\nPlease change your password after logging in.\n\nBest regards,\nYour Team`,
    };

    await themail.sendMail(mailOptions);

    return res.status(200).json({ message: "Data saved successfully!" });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: "Internal server error" });
  }
});

router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    // Find the user by email
    const user = await userSchema.findOne({ email });

    // If user not found or incorrect password
    if (!user || user.password !== password) {
      return res.status(400).json({ message: "Invalid credentials" });
    }

    // Generate JWT token
    const token = jwt.sign({ email: user.email, id: user._id }, "mySecretKey", {
      expiresIn: "1h",
    });
 
    // Remove password before sending user data
    user.password = undefined;

    return res.status(200).json({
      message: "Login successful",
      data: {
        token,
        user,
      },
    });
  } catch (error) {
    console.error(error.message);
    return res.status(500).json({ message: "Internal server error" });
  }
});

module.exports = router;
